name: ci-build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "*" ]

env:
  DOCKER_REGISTRY: my-docker-registry

jobs:

  Build:

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Install Composer Dependencies
        run: composer install -q --no-ansi --no-interaction --no-progress --prefer-dist

      - name: Generate .env File
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install NPM Dependencies
        run: npm install

      - name: Build UI
        run: npm run build

      - name: Zip Artifact for next steps
        run: zip -r artifact.zip .[^.]* *

      - uses: actions/upload-artifact@master
        name: Upload Artifact
        with:
          name: application-artifact
          path: artifact.zip

  Tests:
    needs: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@master
        name: Download Artifact
        with:
          name: application-artifact

      - name: Unzip Artifact
        run: unzip artifact.zip ; rm artifact.zip

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Create Database
        run: |
            mkdir -p database
            touch database/database.sqlite

      - name: Execute tests
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
          APP_URL: ${{ vars.APP_URL }}
        run: vendor/bin/phpunit

  DockerBuild:
    needs: Build
    runs-on: ubuntu-latest
    env:
      APP_URL: ${{ vars.APP_URL }}
      APP_NAME: fast-and-curious-laravel
      DOCKER_REGISTRY: 484725583747.dkr.ecr.eu-central-1.amazonaws.com

    steps:
        - uses: actions/download-artifact@master
          name: Download Artifact
          with:
            name: application-artifact

        - name: Unzip Artifact
          run: unzip artifact.zip ; rm artifact.zip

        - name: Determine default branch
          id: branch_step
          run: |
            default_branch=$(git -C ${{ github.workspace }} remote show origin | grep 'HEAD branch' | awk '{print $NF}')
            echo "default_branch=$default_branch" >> $GITHUB_ENV

        - name: Determine tag value
          id: tag_step
          run: |
            if [ "$GITHUB_REF" == "refs/heads/$default_branch" ]; then
              echo "tag=latest" >> $GITHUB_ENV
            else
              echo "tag=$(basename "$GITHUB_REF")" >> $GITHUB_ENV
            fi

        - name: Use tag value in the next step
          run: |
            echo "Tag value is $tag"

        - name: Build Docker image
          run: docker build -t ${DOCKER_REGISTRY}/${APP_NAME}:${tag} .

        - name: Build and push Docker image
          uses: docker/build-push-action@v2
          with:
            context: .
            push: false
            tags: ${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}:${{ env.tag }}

        - name: Save Docker image as artifact
          uses: actions/upload-artifact@v2
          with:
            name: docker-image
            path: |
              /var/lib/docker/image/${DOCKER_REGISTRY}_${APP_NAME}-${tag}.tar

#  Release:
#    needs: Tests
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/download-artifact@master
#        name: Download Artifact
#        with:
#          name: application-artifact
#
#      - name: Unzip Artifact
#        run: unzip artifact.zip ; rm artifact.zip

#      - run: cat dist/world.txt
